czone <- readRDS("data_coded_bgd/dhuts/czone_BGD.rds")
czone <- readRDS("/Users/yuheim/Dropbox (BOSTON UNIVERSITY)/research/BGD_SLK_cellphone/for_publication_public/data_coded_bgd/dhuts/czone_BGD.rds")
source(paste0(Sys.getenv("HOME"), "/Rinit/profile.R"))
knitr::opts_knit$set(root.dir = BGDSLKCELLPHONE_DATA)
path.expand("~")
# function to assess if num1 is greater than num2
compare_numbers <- function(num1, num2){
if (num1 - num2 > 0){
out = TRUE
} else {
out = FALSE
}
out
}
# function to assess if num1 is greater than num2
compare_numbers <- function(num1, num2){
if (num1 - num2 > 0){
out = TRUE
} else {
out = FALSE
}
out
}
# randomly draw "1" or "0"
if (runif(1) < 0.5) {
draw = "1"
} else {
draw = "0"
}
# check if the random draw is less than 0.5
compare_numbers(draw, 0.5)
source("~/Dropbox (BOSTON UNIVERSITY)/teaching/EC705/2022/class_materials/codes/lecture4_5_debugging.R")
source("~/Dropbox (BOSTON UNIVERSITY)/teaching/EC705/2022/class_materials/codes/lecture4_5_debugging.R")
source("~/Dropbox (BOSTON UNIVERSITY)/teaching/EC705/2022/class_materials/codes/lecture4_5_debugging.R")
# check if the random draw is less than 0.5
compare_numbers(draw, 0.5)
debugSource("~/Dropbox (BOSTON UNIVERSITY)/teaching/EC705/2022/class_materials/codes/lecture4_5_debugging.R")
num1
num2
class(num1)
source("~/Dropbox (BOSTON UNIVERSITY)/teaching/EC705/2022/class_materials/codes/lecture4_5_debugging.R")
converge = function(x0, tol) {
while(TRUE) {
x = (1/2) * (x0-2)
eps = abs(x-x0)
# stop if num_v1 < num
if(eps < tol) {
break
}
x0 = x
}
return(x)
}
converge_and_output = function(x0, tol){
converge(x0, tol)
print(paste("Sequence converged at ", x))
}
converge_and_output(x0=1, tol=0.01)
## From a matrix with NAs, compute the mean value of elements of each row
##    that does not contain any NA elements
## create a matrix with NAs
x <- matrix(rnorm(10000000), nrow=1000)          # random 1000 x 1000 matrix
x[sample(1:10000000, 1000, replace=FALSE)] <- NA # replace random 1000 elements as NA
## function to compute vectors of rowwise means for each non-NA rows
slowFun = function(x) {
res = NULL
for (i in 1:nrow(x)) {
# For each row `i`, if there is no missing, add to `res`
if (!any(is.na(x[i,]))) res = rbind(res, x[i,])
}
# compute means of elements for each row
apply(res,1,mean)
}
## profiling the function
Rprof ()               # Start profiler
x.nomiss <- slowFun(x) # run code
Rprof(NULL)            # end profiler
summaryRprof()         # view results
## use profvis() from profvis package to visually see the bottleneck
library(profvis)
profvis({
res = NULL
n = nrow(x)
for (i in 1:n) {
if (!any(is.na(x[i,]))) res = rbind(res, x[i,])
}
apply(res,1,mean)
})
x <- rnorm( 10e6, 100, 2 )
# compute max
system.time({
# Slow method:
max_var <- x[1]
for(i in seq_along(x)){
if(max_var < x[i]){
max_var <- x[i]
}
}
})
system.time({
# Faster:
log_sum <- max(x)
})
library(doParallel)    # basic parallelization package
library(foreach)       #"foreach" parallelization module is nice and intuitive
## Obtain the number of sum(1:i) for each i in a vector
iter = 20000
## v1. parallelized
system.time({
ncore   <- detectCores()                          # detect number of cores
cl      <- makeCluster(ncore - 1, type="FORK")    # create clusters of ncore - 1 (save one core for other tasks)
# type = "FORK" means that each cluster will copy the current R session. type="PSOCK" creates a brand new R session.
registerDoParallel(cl)               # register clusters to foreach package
x <- foreach(i = 1:iter, .combine = 'c') %dopar% {
out = 0
for(j in 1:i){
out = out + j
}
out
}
stopCluster(cl)   # stop the cluster
})
## v2. unparallelized
system.time({
x <- vector()
for(i in 1:iter){
out = 0
for(j in 1:i){
out = out + j
}
x[i] <- out
}
})
x
ncore
## Obtain the number of sum(1:i) for each i in a vector
iter = 200
## v1. parallelized
system.time({
ncore   <- detectCores()                          # detect number of cores
cl      <- makeCluster(ncore - 1, type="FORK")    # create clusters of ncore - 1 (save one core for other tasks)
# type = "FORK" means that each cluster will copy the current R session. type="PSOCK" creates a brand new R session.
registerDoParallel(cl)               # register clusters to foreach package
x <- foreach(i = 1:iter, .combine = 'c') %dopar% {
out = 0
for(j in 1:i){
out = out + j
}
out
}
stopCluster(cl)   # stop the cluster
})
## v2. unparallelized
system.time({
x <- vector()
for(i in 1:iter){
out = 0
for(j in 1:i){
out = out + j
}
x[i] <- out
}
})
# create a new vector for each operation
system.time({
x <- c()
for (i in  1: 10e4) {
x <- c( x, i )
}
})
# create vector x first
system.time({
x <- numeric(10e4)
for (i in  1: 10e4) {
x[i] <- i
}
})
matr <-NULL
system.time( for(i in seq(1e4)) matr <-rbind(matr, 1:10) )
matr <- matrix(NA, nrow=1e4, ncol=10)
system.time( for(i in seq(1e4) ) matr[i,] <- 1:10)
# Use microbenchmark package for evaluating run time of very short executions
library(microbenchmark)
# If you are working with all-numeric data, matrix is a faster R object to use than a data.frame
mat <- matrix(rnorm(10e5),ncol=10)
df <- data.frame(mat)
microbenchmark(mat[1,1], df[1,1])
# When using a data.frame it is slightly faster to use a column name
microbenchmark(
"[50, 3]" = df[50,3],
"$V3[50]" = df$V3[50]
)
# When using a data.frame it is slightly faster to use a column name
microbenchmark(
"[50, 3]" = df[50,3],
"$V3[50]" = df$V3[50]
)
## Obtain the number of sum(1:i) for each i in a vector
iter = 20000
## v1. parallelized
system.time({
ncore   <- detectCores()                          # detect number of cores
cl      <- makeCluster(ncore - 1)    # create clusters of ncore - 1 (save one core for other tasks)
registerDoParallel(cl)               # register clusters to foreach package
x <- foreach(i = 1:iter, .combine = 'c') %dopar% {
out = 0
for(j in 1:i){
out = out + j
}
out
}
stopCluster(cl)   # stop the cluster
})
#### parallelization  --------------------------------
library(doParallel)    # basic parallelization package
library(foreach)       #"foreach" parallelization module is nice and intuitive
## Obtain the number of sum(1:i) for each i in a vector
iter = 20000
## v1. parallelized
system.time({
ncore   <- detectCores()             # detect number of cores
cl      <- makeCluster(ncore - 1)    # create clusters of ncore - 1 (save one core for other tasks)
registerDoParallel(cl)               # register clusters to foreach package
x <- foreach(i = 1:iter, .combine = 'c') %dopar% {
out = 0
for(j in 1:i){
out = out + j
}
out
}
stopCluster(cl)   # stop the cluster
})
library(doParallel)    # basic parallelization package
library(foreach)       #"foreach" parallelization module is easy to implement
library(nycflights13)
library(tidyverse)
library(lfe)
data(iris)
trials <- 100
boot_num <- nrow(flights)
#### original regression
result    <- lm(arr_delay ~ log(distance), data = flights)
coef_full <- coef(summary(result))["log(distance)", "Estimate"  ]
se_full   <- coef(summary(result))["log(distance)", "Std. Error"]
#### Without parallelization
system.time({
coef_boot = numeric(trials)
for (i in 1:trials){
flights_permute  <- flights %>% sample_n(boot_num, replace = TRUE)
result_boot      <- lm(arr_delay ~ log(distance), data = flights_permute)
coef_boot[i]     <- coef(summary(result))["log(distance)", "Estimate"]
}
sd(coef_boot)
})
source("~/Dropbox (BOSTON UNIVERSITY)/teaching/EC705/2021/EC705_codes/codes/lecture4_5_hw3.R")
a = (y + x) /
z
a = (y + x) / ...
# function to assess if num1 is greater than num2
compare_numbers <- function(num1, num2){
if (num1 - num2 > 0){
out = TRUE
} else {
out = FALSE
}
out
}
# randomly draw "1" or "0"
if (runif(1) < 0.5) {
draw = "1"
} else {
draw = "0"
}
# check if the random draw is less than 0.5
compare_numbers(draw, 0.5)
# function to assess if num1 is greater than num2
compare_numbers <- function(num1, num2){
if (num1 - num2 > 0){
out = TRUE
} else {
out = FALSE
}
out
}
# randomly draw "1" or "0"
if (runif(1) < 0.5) {
draw = "1"
} else {
draw = "0"
}
# check if the random draw is less than 0.5
compare_numbers(draw, 0.5)
debugSource("~/Dropbox (BOSTON UNIVERSITY)/teaching/EC705/2022/class_materials/codes/lecture4_5_debugging.R")
# randomly draw "1" or "0"
if (runif(1) < 0.5) {
draw = "1"
} else {
draw = "0"
}
# check if the random draw is less than 0.5
compare_numbers(draw, 0.5)
num1
num2
class(num1)
class(num2)
num1 - num2
# function to assess if num1 is greater than num2
compare_numbers <- function(num1, num2){
browser()
if (num1 - num2 > 0){
out = TRUE
} else {
out = FALSE
}
out
}
# randomly draw "1" or "0"
if (runif(1) < 0.5) {
draw = "1"
} else {
draw = "0"
}
# check if the random draw is less than 0.5
compare_numbers(draw, 0.5)
converge = function(x0, tol) {
while(TRUE) {
x = (1/2) * (x0-2)
eps = abs(x-x0)
if(eps < tol) {
break
}
x0 = x
}
return(x)
}
converge_and_output = function(x0, tol){
converge(x0, tol)
print(paste("Sequence converged at ", x))
}
converge_and_output(x0=1, tol=0.01)
x <<- 2
